import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import sqlite3
import spacy
from dateutil.parser import parse
import os
import openai

# Configuración de spaCy y OpenAI
nlp = spacy.load("es_core_news_sm")
openai.api_key = os.getenv("OPENAI_API_KEY")  # Configura tu clave API en una variable de entorno

# Ruta de la base de datos SQLite
DATABASE_PATH = 'students.db'

# Funciones relacionadas con la base de datos
def connect_to_db():
    try:
        return sqlite3.connect(DATABASE_PATH)
    except sqlite3.Error as e:
        messagebox.showerror("Error", f"Error al conectar con la base de datos: {e}")
        return None

def query_database(student_name=None, class_name=None, module_name=None):
    conn = connect_to_db()
    if not conn:
        return "No se pudo establecer conexión con la base de datos."

    try:
        cursor = conn.cursor()
        context = []

        if student_name:
            cursor.execute("""
                SELECT clase_id, nombre FROM alumnos WHERE LOWER(nombre) LIKE LOWER(?) 
            """, (f'%{student_name}%',))
            students = cursor.fetchall()

            if students:
                for student in students:
                    class_id = student[0]
                    cursor.execute("SELECT nombre, aula, piso FROM clases WHERE id=?", (class_id,))
                    class_info = cursor.fetchone()
                    if class_info:
                        context.append(
                            f"Estudiante: {student[1]}, Clase: {class_info[0]} (Aula: {class_info[1]}, Piso: {class_info[2]})."
                        )
                    else:
                        context.append(f"No se encontró información de clase para el estudiante {student[1]}.")
            else:
                context.append(f"No se encontró al estudiante {student_name}.")

        if class_name:
            cursor.execute("SELECT id, aula, piso FROM clases WHERE LOWER(nombre) LIKE LOWER(?)", (f'%{class_name}%',))
            class_info = cursor.fetchone()
            if class_info:
                context.append(f"La clase {class_name} está en el Aula {class_info[1]}, Piso {class_info[2]}.")
                cursor.execute("SELECT nombre, horario FROM modulos WHERE clase_id=?", (class_info[0],))
                modules = cursor.fetchall()
                if modules:
                    mod_info = ", ".join([f"{module[0]} (Horario: {module[1]})" for module in modules])
                    context.append(f"Módulos asignados: {mod_info}.")
                else:
                    context.append(f"No hay módulos asignados para la clase {class_name}.")
            else:
                context.append(f"No se encontró la clase {class_name}.")

        if module_name:
            cursor.execute("""
                SELECT nombre, horario FROM modulos WHERE LOWER(nombre) LIKE LOWER(?) 
            """, (f'%{module_name}%',))
            module_info = cursor.fetchall()
            if module_info:
                for module in module_info:
                    context.append(f"Módulo: {module[0]}, Horario: {module[1]}.")
            else:
                context.append(f"No se encontró el módulo {module_name}.")

        conn.close()
        return " ".join(context) if context else "No se encontró información."

    except sqlite3.Error as e:
        return f"Error al consultar la base de datos: {e}"

# Funciones relacionadas con OpenAI
def ask_openai(question, context):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system",
                 "content": "Eres un asistente académico que responde preguntas de forma clara y detallada."},
                {"role": "user", "content": f"Contexto: {context}\nPregunta: {question}"}
            ],
            temperature=0.7,
            max_tokens=300
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        return f"Error al conectar con OpenAI: {e}"

# Función principal
def handle_question(question):
    doc = nlp(question)
    student_name = None
    class_name = None
    module_name = None
    date = None

    for ent in doc.ents:
        if ent.label_ == "PER":
            student_name = ent.text.strip()
        elif ent.label_ == "ORG":
            class_name = ent.text.strip()
        elif ent.label_ == "MISC":
            module_name = ent.text.strip()
        elif ent.label_ == "DATE":
            try:
                date = parse(ent.text).date()
            except ValueError:
                pass

    if student_name or class_name or module_name or date:
        context = query_database(student_name, class_name, module_name)
        return ask_openai(question, context)
    else:
        return "No pude identificar información suficiente en tu pregunta. Por favor, especifica mejor."

# Función de la interfaz para manejar consultas
def consultar_ia():
    pregunta = text_pregunta.get("1.0", tk.END).strip()
    if pregunta:
        respuesta = handle_question(pregunta)
        text_respuesta.delete("1.0", tk.END)
        text_respuesta.insert(tk.END, respuesta)
    else:
        messagebox.showerror("Error", "Por favor, ingresa una pregunta.")

# Interfaz gráfica
root = tk.Tk()
root.title("Sistema Académico con IA")
root.geometry("900x600")
root.configure(bg="#2b2b2b")  # Fondo oscuro
root.resizable(False, False)

# Estilo oscuro
style = ttk.Style()
style.theme_use("clam")
style.configure("TLabel", font=("Arial", 12), background="#2b2b2b", foreground="#e1e1e1")
style.configure("TButton", font=("Arial", 12), background="#0078d7", foreground="#ffffff", padding=8)
style.configure("Header.TLabel", font=("Arial", 16, "bold"), background="#2b2b2b", foreground="#ffffff")
style.configure("TFrame", background="#2b2b2b")

# Encabezado
header_frame = ttk.Frame(root, padding="20", style="TFrame")
header_frame.pack(fill=tk.X, pady=5)
header_label = ttk.Label(header_frame, text="Sistema Académico Asistido por IA", style="Header.TLabel")
header_label.pack()

# Marco principal
main_frame = ttk.Frame(root, padding="15", style="TFrame")
main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

# Entrada de pregunta
label_pregunta = ttk.Label(main_frame, text="Escribe tu pregunta:")
label_pregunta.grid(row=0, column=0, sticky="w", pady=10)
text_pregunta = tk.Text(main_frame, height=5, font=("Arial", 12), wrap=tk.WORD, relief="solid", bd=1, bg="#3c3c3c", fg="#e1e1e1")
text_pregunta.grid(row=1, column=0, columnspan=2, sticky="we", padx=10)

# Botón de consulta
btn_chat = ttk.Button(main_frame, text="Consultar", command=consultar_ia)
btn_chat.grid(row=2, column=0, columnspan=2, pady=15)

# Salida de respuesta
label_respuesta = ttk.Label(main_frame, text="Respuesta:")
label_respuesta.grid(row=3, column=0, sticky="w", pady=10)
text_respuesta = scrolledtext.ScrolledText(main_frame, height=15, font=("Arial", 12), wrap=tk.WORD, relief="solid", bd=1, bg="#3c3c3c", fg="#e1e1e1", insertbackground="#e1e1e1")
text_respuesta.grid(row=4, column=0, columnspan=2, sticky="nsew", padx=10)

# Configuración de redimensionamiento
main_frame.columnconfigure(0, weight=1)
main_frame.rowconfigure(4, weight=1)

# Ejecutar aplicación
root.mainloop()
